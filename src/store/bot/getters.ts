import { BotState } from "../../types/bot";

/**
 * @notice - Used to compute the total volume of the user bots since their launch
 * @param state - The bot state
 * @returns - The total volume generated by the bots
 */
export function totalVolume(state: BotState): number {
  let volume = 0;

  state.bots.forEach((bot) => {
    volume += (bot.quotePrice * bot.feesEarned) / (bot.makerFees / 100);
  });
  return volume;
}

/**
 * @notice - Used to compute the total fees of the user bots since their launch
 * @param state - The bot state
 * @returns - The total fees generated by the bots
 */
export function totalFees(state: BotState): number {
  let fees = 0;

  state.bots.forEach((bot) => {
    fees += bot.quotePrice * bot.feesEarned;
  });
  return fees;
}

/**
 * @notice - Used to compute the annual yield of the user bots
 * @param state - The bot state
 * @returns - The average yield of all the bots
 */
export function totalYield(state: BotState): number {
  let fees = 0;
  let assets = 0;
  let time = Math.floor(Date.now() / 1000);

  state.bots.forEach((bot) => {

    if (!(bot.baseUSD && bot.quoteUSD)) return;
    fees +=
      (bot.quotePrice * bot.feesEarned) /
      ((time - bot.timestamp) / (60 * 60 * 24 * 365));
    assets += bot.baseUSD + bot.quoteUSD;
  });
  return fees / assets;
}

/**
 * @notice - Used to compute the total value of the user bots
 * @param state - The bot state
 * @returns - The total value of the bots
 */
export function totalValue(state: BotState): number {
  let value = 0;
  state.bots.forEach((bot) => {
    value += bot.baseUSD + bot.quoteUSD;
  });
  return value;
}
